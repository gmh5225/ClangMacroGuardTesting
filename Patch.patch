diff --git a/clang/lib/Lex/Pragma.cpp b/clang/lib/Lex/Pragma.cpp
index eb370e8a0ecd..8d6e3f217637 100644
--- a/clang/lib/Lex/Pragma.cpp
+++ b/clang/lib/Lex/Pragma.cpp
@@ -35,6 +35,7 @@
 #include "clang/Lex/PreprocessorOptions.h"
 #include "clang/Lex/Token.h"
 #include "clang/Lex/TokenLexer.h"
+#include "clang/Lex/MacroGuardValidator.h"
 #include "llvm/ADT/ArrayRef.h"
 #include "llvm/ADT/DenseMap.h"
 #include "llvm/ADT/Optional.h"
@@ -1030,6 +1031,35 @@ bool Preprocessor::LexOnOffSwitch(tok::OnOffSwitch &Result) {
 
 namespace {
 
+/// MacroGuardHandler - "\#pragma macro_arg_guard" verify macro arg.
+struct MacroGuardHandler : public PragmaHandler {
+    MacroGuardHandler() : PragmaHandler("macro_arg_guard") {}
+    bool IsValidatorRegistered = false;
+
+    void HandlePragma(Preprocessor &PP, PragmaIntroducer Introducer,
+                      Token &PragmaTok) override {
+        // Reset buffer
+        ArgsToEnclosedForMacroGuardValidator.clear();
+
+        Token Tok;
+        PP.Lex(Tok);
+        // loop until the end of preprocessing directive.
+        while (Tok.isNot(tok::eod)) {
+            ArgsToEnclosedForMacroGuardValidator.push_back(
+                Tok.getIdentifierInfo());
+            PP.Lex(Tok);
+        }
+
+        if (!IsValidatorRegistered) {
+            // Register the validator PPCallbacks
+            auto Validator =
+                std::make_unique<MacroGuardValidator>(PP.getSourceManager());
+            PP.addPPCallbacks(std::move(Validator));
+            IsValidatorRegistered = false;
+        }
+    }
+};
+
 /// PragmaOnceHandler - "\#pragma once" marks the file as atomically included.
 struct PragmaOnceHandler : public PragmaHandler {
   PragmaOnceHandler() : PragmaHandler("once") {}
@@ -2129,6 +2159,7 @@ struct PragmaFinalHandler : public PragmaHandler {
 /// RegisterBuiltinPragmas - Install the standard preprocessor pragmas:
 /// \#pragma GCC poison/system_header/dependency and \#pragma once.
 void Preprocessor::RegisterBuiltinPragmas() {
+  AddPragmaHandler(new MacroGuardHandler());
   AddPragmaHandler(new PragmaOnceHandler());
   AddPragmaHandler(new PragmaMarkHandler());
   AddPragmaHandler(new PragmaPushMacroHandler());
